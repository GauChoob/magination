
import projutils.utils as utils
import projutils.filereference as filereference
import projutils.config as config
import projutils.tileset as tileset
import projutils.color as color
import projutils.sprite as sprite
import os

sym = utils.SymFile('python/BITsym2.sym')
rom = utils.Rom()
out = config.outdir
sprite_pal = color.Palette.init_from_original_file('python/projutils/data/AllSprites.pal.png')
sprite_stone_pal = color.Palette.init_from_original_file('python/PAL_Sprite_StoneMagi.pal.png')
sprite_offsets = sprite.SpriteOffsets()


# sprite_list['Ripple'] = 'assets\sprites\objects\ripple'
sprite_list = {}
for dirpath, dirnames, filenames in os.walk('assets\\sprites\\'):
    if dirnames:
        continue
    for filename in filenames:
        if not filename.endswith('.spr'):
            continue
        folder = None
        if '_' in filename:
            folder = filename.split('_', 1)[0]
        else:
            folder = filename.split('.', 1)[0]
        sprite_list[folder] = dirpath + '\\'


def colorize(ref: filereference.FileReference):
    if ref.identity != tileset.Bitmap:
        return False
    offset = 0x8000
    vbk = 0
    offset_name = ref.label_name.rsplit('_', 1)[1]
    if offset_name in sprite_offsets.bases:
        delta = sprite_offsets.bases[offset_name]
        if delta >= 0x100:
            vbk = 1
            delta -= 0x100
        offset += sprite_offsets.bases[offset_name]*0x10
    palette = sprite_pal.palette
    if ref.label_name.startswith('BITMAP_Sprite_Stone'):
        palette = sprite_stone_pal.palette
    ref.contents.colorize_from_sprite(ref._spr_glob, vbk, offset, color.Palette.init_from_list(palette), 0, True, 0)
    return True


def parse_path(ref: filereference.FileReference):
    if ref.identity == tileset.Bitmap:
        label = ref.label_name
        label_title = label.rsplit('_', 1)[1]
        path = sprite_list[label_title]
        spr_glob = path + label_title + '.spr'
        if not os.path.exists(path + label_title + '.spr'):
            spr_glob = path + label_title + '_*.spr'
        no_extension = path + label.split('_', 2)[2]
        no_extension = no_extension.replace('\\', '/')
        return [spr_glob, no_extension + ref.contents.original_extension(), 'autogenerated/' + no_extension + ref.contents.processed_extension()]
    elif ref.identity == color.Palette:
        no_extension = 'assets/sprites/scene/' + ref.label_name.split('_', 2)[2]
        return [None, no_extension + ref.contents.original_extension(), 'autogenerated/' + no_extension + ref.contents.processed_extension()]
    raise KeyError


def build_args(ref: filereference.FileReference):
    if ref.identity == tileset.Bitmap:
        size = ref._size
        tilesize = 0x10
        width = 0x10
        height = -(-size//tilesize//width)  # Round up
        return [ref.label_name.endswith('RLE'), width, height, size]
    elif ref.identity == color.Palette:
        return [ref._size//2]
    return []


def get_bank_list(bank):
    return sorted(sym.symbols[bank].items())


def parse_bank(bank):
    files = get_bank_list(bank)
    bitsprite_list = []
    transmit = input('"Transmit" to save in real folder\n') == 'Transmit'
    for i, (address, label) in enumerate(files):
        if len(label) > 1:
            raise KeyError
        label = label[0]
        print(f'{bank:02X}-{address:04X}: {label}')
        if label == 'END':
            continue
        address_end = files[i + 1][0]
        identity, label = label.split('_', 1)
        ref = filereference.FileReference.create_from_address(identity, rom, utils.BankAddress(bank, address), sym)
        ref._size = address_end - address
        ref.load_contents_from_rom(*build_args(ref))
        ref._spr_glob, ref.original_path, ref.processed_path = parse_path(ref)
        print(ref.processed_path)
        colorize(ref)
        outpath = out + ref.original_path
        os.makedirs(os.path.dirname(outpath), exist_ok=True)
        ref.contents.save_original_file(outpath)
        if transmit:
            ref.contents.save_original_file(ref.original_path)
        ref.replace_rom_text()
        bitsprite_list.append(f'    BITMAP_Sprite {ref.label_name}, "{ref.processed_path}"')
    with open('python/out/bitsprite.asm', 'w') as f:
        f.write('\n'.join(bitsprite_list))


parse_bank(0x0D)