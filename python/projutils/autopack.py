import re
import os


DEFAULT_SOURCE = "autopack/autopack.config"
DEFAULT_OUT = "autogenerated/autopack/"
ASMFILE = "autopack.asm"
SYMFILE = "autopack.sym"


class AutopackFile:
    class FileParam(object):
        """Represents a line in the [FILELIST].
        Calculates the size of the file, be it a binary file or a .asm file"""
        def __init__(self, line: str):
            """line: a line of text in the [FILELIST] section of the config file"""
            label, path = line.split(",")
            label = label.strip()
            path = path.strip()

            if path[-3:] == "asm":
                with open(path, "r") as f:
                    asmlines = f.readlines()
                size = 0
                for line in asmlines:
                    # Remove comment
                    rem = re.search(r";.*$", line)
                    if rem:
                        line = line[:rem.start()]
                    line = line.strip()
                    arg = line.split(" ")[0]
                    if arg == "":
                        continue
                    elif arg == "db":
                        size += len(line.split(","))
                    elif arg == "dw":
                        size += 2*len(line.split(","))
                    elif arg == "LoadBitmap":
                        size += 7
                    elif arg == "AddressBank":
                        size += 3
                    elif arg == "BankAddress":
                        size += 3
                    elif arg == "INCBIN":
                        rem = re.search(r'"([^"]*)"', line)
                        incpath = rem.group(1)
                        size += os.path.getsize(incpath)
                    else:
                        raise KeyError("Unknown line in file {}: {}".format(path, line))
            else:
                size = os.path.getsize(path)

            self.label = label
            self.path = path
            self.size = size
            assert self.size <= 0x4000

    def __init__(self, file: str = DEFAULT_SOURCE):
        self.file = file
        with open(file, 'r') as f:
            lines = iter(f.readlines())

        # Skip comments in top of file
        for line in lines:
            line = line.strip()
            if line == "[CONFIG]":
                break

        # Parse [CONFIG]
        self.params = {}
        VALID_PARAMS = ["STARTBANK", "ENDBANK"]
        for line in lines:
            line = line.strip()
            if len(line) == 0:
                continue
            if line == "[FILELIST]":
                break
            param, value = line.split("=")
            param = param.strip()
            value = value.strip()
            if param in VALID_PARAMS:
                if value[0] == "$":
                    value = int(value[1:], 16)
                else:
                    value = int(value, 10)
            else:
                raise KeyError("Unknown parameter in [CONFIG]: {}".format(param))
            self.params[param] = value

        # Parse [FILELIST]
        self.filelist = []
        for line in lines:
            line = line.strip()
            if len(line) == 0:
                continue
            self.filelist.append(AutopackFile.FileParam(line))
        self.filelist = sorted(self.filelist, key=lambda x: x.size, reverse=True)

    def make_file(self, folder: str = DEFAULT_OUT) -> None:
        """Writes a .asm file that contains all the packed assets into the specified banks"""

        os.makedirs(DEFAULT_OUT, exist_ok=True)

        outfile = folder + ASMFILE
        symfile = folder + SYMFILE

        curbank = self.params["STARTBANK"] - 1
        curaddr = 0x8000

        sym = []
        with open(outfile, "w") as f:
            f.write("; File autogenerated from {}.\n\n".format(self.file))
            f.write("; Start Bank: ${:02X}\n".format(self.params["STARTBANK"]))
            f.write("; End Bank: ${:02X}\n\n".format(self.params["ENDBANK"]))

            while True:
                if curaddr == 0x8000:
                    curaddr = 0x4000
                    curbank += 1
                    if(curbank == self.params["ENDBANK"]):
                        # No more room
                        break
                    f.write('\nSECTION "Mr Yuk AutoPack ${:02X}", ROMX[$4000], BANK[${:02X}]\n\n\n'.format(curbank, curbank))

                f.write("    ; ${:04X}\n".format(curaddr))

                space = 0x8000 - curaddr
                success = False
                for i in range(len(self.filelist)):
                    if self.filelist[i].size <= space:
                        success = True
                        myfile = self.filelist.pop(i)
                        sym.append("{:02X}:{:04X} {}".format(curbank, curaddr, myfile.label))
                        f.write('{}::\n    {} "{}"\n\n'.format(myfile.label, "INCLUDE" if myfile.path[-3:] == "asm" else "INCBIN", myfile.path))
                        curaddr += myfile.size
                        break
                if not success:
                    # Rest of the file is empty
                    curaddr = 0x8000

        if len(self.filelist) > 0:
            raise MemoryError("Output file is full, but there are still more files that must be packed!")

        with open(symfile, "w") as f:
            f.write('; File generated by autopack.py\n')
            f.write('\n'.join(sym))
