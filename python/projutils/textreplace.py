import os
import shutil
import projutils.asm as asm
import projutils.utils as utils
import projutils.config as config

# This module takes virgin .asm files autogenerated by mgbdis and determines where an asset would fit.
# It then excises the code/db/structures that are in the way and replaces it with custom text
#
# e.g. You want to replace address 0x5000-0x5100 in bank 0x54 with an image
# replace_rom_text(0x54,0x5000,0x5100,"testImage:",'    INCBIN "testImage.2bpp"')

SOURCEDIR = "source/banks/"
OUTDIR = config.outdir + "banks/"
os.makedirs(OUTDIR, exist_ok=True)


def _replace_rom_text(file: str, address: int, end: int, label: str, contents: str):
    global errors
    errors = ""

    def printError(x):
        global errors
        errors += str(x)+" | "
        print(x)

    # Read through the .asm file and interpret the address position of each line
    asmfile = asm.AsmFile(file)
    lines = asmfile.lines

    # Write the modified file
    with open(file, "w") as f:
        # Let's first write all the lines preceding the replacement we want to do
        imax = len(lines)
        i = 0
        found = False
        while i < imax:
            line = lines[i]
            if line.address > 0x8000 or line.address < 0x4000 or line.size == asm.AsmLine.UNKNOWN_SIZE:
                # Unknown position, so let's not replace anything
                pass
            elif line.address > address:
                # We missed the line. Error
                printError("Unable to solve:")
                printError(line)
                break

            elif line.address == address:
                # Starts on this line
                found = True
                break
            elif line.address + line.size == address:
                # The line ends at the target address
                f.write(str(line))  # We can write this line since it is entirely before the target address
                i += 1
                found = True
                break

            elif line.address + line.size > address:
                # The target address is in the middle of the line
                # We will have to convert the line to raw bytes and insert the data in-between the raw data

                # Let's write the raw bytes preceding the place where we want to replace
                f.write(utils.AsmBytes(line.raw_bytes[0:address - line.address], 16) + "\n")
                # Don't increase i because it can end on the same line as well
                found = True
                break

            # The line predates the desired address, so let's just write it as is
            f.write(str(line))
            i += 1
        if not found:
            print("NOT FOUND ERROR: {}:{:04X}".format(file, address))
            input()

        def writeMiddle() -> None:
            """Write the data we want to insert:

            LABEL:
                CONTENTS"""
            f.write(label+"\n")
            f.write(contents+"\n\n")

        # We don't immediately inject the desired data, because we need to check for co-existing labels first
        f.write("\n")
        # Insert a manual comment with address
        headeraddress = "    ; "
        f.write(headeraddress + utils.AsmWords([address], 0)+"\n")

        while i < imax:
            line = lines[i]

            if isinstance(line, (asm.EmptyLine, asm.CommentLine)):
                i += 1
                continue

            if isinstance(line, asm.LabelLine) and line.address == address:
                # Multiple labels can co-exist
                f.write(str(line))
                printError("Co-existing with the label:")
                printError(str(line.label_name))
                i += 1
                continue

            if line.address > 0x8000 or line.address < 0x4000 or line.size == asm.AsmLine.UNKNOWN_SIZE:
                # Unknown position, let's keep going
                i += 1
                continue

            # Hmm for some reason the line's address is further than the end of the data to inject. Something went wrong
            if line.address > end:
                # Unclear where end truly is
                printError("Error misalignment at the end. Verify the saved file!!!")
                printError(str(line))
                writeMiddle()
                # Write a label as to where the end of the data is
                f.write(headeraddress + utils.AsmWords([end], 0)+"\n")
                # Write a label as to where the lines start after the end of the data, demonstrating the gap
                f.write(headeraddress + utils.AsmWords([line.address], 0)+"\n")
                f.write(str(line))
                i += 1
                break

            # The line's end aligns perfectly with the start of the injected data
            if line.address + line.size == end:
                writeMiddle()
                f.write(headeraddress + utils.AsmWords([end], 0)+"\n")
                i += 1
                break

            # The injected data ends halfway through the line
            if line.address + line.size > end:
                writeMiddle()
                f.write(headeraddress + utils.AsmWords([end], 0)+"\n")
                # Write the raw bytes of the second half of the line
                f.write(utils.AsmBytes(line.raw_bytes[end-line.address:], 16)+"\n")
                i += 1
                break
            i += 1
        # Write all the lines at the end of the file
        while i < imax:
            line = lines[i]
            f.write(str(line))
            i += 1
    return errors


def replace_rom_text(start: utils.BankAddress, end: utils.BankAddress, label: str, contents: str):
    """Replaces the text in the .asm file representing BankAddresses start - end with label & contents
    Before running the function, make sure to request the banks you will modify via reset_files(banks)"""
    assert isinstance(start, utils.BankAddress)
    assert isinstance(end, utils.BankAddress)
    bank = start.getBank()
    assert bank == end.getBank(end=True)
    start_addr = start.getAddress()
    end_addr = end.getAddress(end=True)

    filename = "bank_0{:02x}".format(bank)
    filename_len = len(filename)
    for file in os.listdir(OUTDIR):
        if file[:filename_len] == filename:
            errors = _replace_rom_text(os.path.join(OUTDIR, file), start_addr, end_addr, label, contents)
            if len(errors) > 0:
                print("ABOVE ERRORS FOR: {} | {:02X}:{:04X} - {:04X}".format(label, bank, start_addr, end_addr))
            return "{} - {:04X}:{:04X} - {} - {}".format(file, start.getAddress(), end.getAddress(end=True), label, errors)
    print("FILE NOT FOUND: bank_0{:02x}".format(bank))
    input()


already_reset_files = []


def reset_files(banks: list[int]) -> None:
    """Copies the requested banks into OUTDIR to be modified.
    This way, the original bank files won't be accidentally modified.
    If you request the same bank twice in the same instance, it will not be reset twice."""
    os.makedirs(OUTDIR, exist_ok=True)
    newbanks = []
    for bank in banks:
        if bank not in already_reset_files:
            newbanks.append(bank)
            already_reset_files.append(bank)
    for file in os.listdir(SOURCEDIR):
        if file[:4] == "bank" and int(file[5:8], 16) in newbanks:
            shutil.copyfile(os.path.join(SOURCEDIR, file), os.path.join(OUTDIR, file))
