import logging
import os
import shutil
import make.utils as utils

FOLDERS = [
    'assets\\',
    'magiscript\\',
    ]


def check():
    """If autogenerated file, or any scene file is modified later, then we return True"""
    pass


def delete_all():
    logging.debug('Deleting autogenerated assets files')
    for folder in FOLDERS:
        auto_folder = os.path.join('autogenerated\\', folder)
        if os.path.exists(auto_folder):
            shutil.rmtree(auto_folder)


def build():
    # Get a list of all the processed files and their build time
    generated_files = {}
    for folder in FOLDERS:
        auto_folder = os.path.join('autogenerated\\', folder)
        for header, dirs, files in os.walk(auto_folder):
            for file in files:
                file_path = os.path.join(header, file)
                generated_files[file_path] = utils.get_last_modified(file_path)

    # Now iterate through all the original files and update the files that don't have a processed file or who have been modified since the processed file was created
    # Note that this can fail if you change a file's compression format (RLEX) or if you rename it and overwrite an old file during the rename
    # In which case you probably want to delete_all() and then start from scratch
    for folder in FOLDERS:
        for header, dirs, files in os.walk(folder):
            for file in files:
                file_path = os.path.join(header, file)

                # Check if processed file exists TODO

                file_time = utils.get_last_modified(file_path)
                # Pattern special case where two files (pattern.tilemap/attrmap) are merged into one - get the oldest file_time
                if file_path[-15:] == 'pattern.tilemap':
                    file_path_attr = file_path[:-7] + 'attrmap'
                    file_time = max(file_time, utils.get_last_modified(file_path_attr))


def do():
    build()
